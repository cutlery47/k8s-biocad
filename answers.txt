Ответы на вопросы:

1) Чем git pull отличается от git fetch?

git pull, фактически, являет собой последовательность комманд git fetch и 
git merge. git fetch отвечает за получение изменений из удаленного репозитория,
а git merge отвечает за слияние изменений локального и удаленного репозиториев

2) Какие модели ветвления в git существуют?

Centralized Workflow - модель, при которой все изменения сливаются напрямую
в мастер-ветку

Github Workflow - модель, при которой для каждой новой фичи создается новая
ветка, затем фича-ветки сливаются в мастер посредством PR

Gitflow Workflow - модель, при которой создаются ветки: 
master - для полноценных релизов, 
develop - для разработки, 
feature - для разработки новых фич, 
release - для разработки новых релизов,
hotfix - для исправления ошибок в мастере.

3) Чем в linux отличается soft link от hard link? Какое поведение будет при удалении файла оригинала? 
Можно ли создать hardlink на директорию?

hard link и soft link - механизмы осуществаляющие ссылки на файлы в системе, однако hard link 
ссылается на inode оригинального файла, а soft link ссылается на местоположение файла. 

Если у нас существует hard link оригинального файла, то при удалении данные 
не сотрутся с диска до тех пор, пока у файла не останется hard-ссылок.
В случае soft link, при удалении оригинального файла ссылка ломается

hard link нельзя создать на директорию.

4) Как проверить сетевую доступность между двумя linux-машинами?

Самый очевидный и простой способ - пингануть машину по ip и проверить, 
приходят ли от машины ответные пакеты.

5) Чем контейнер отличается от виртуальной машины

Контейнеризация осуществляется путем изоляции процессов при помощи 
namespaces и cgroups. Для создания контейнера достаточно иметь под рукой
снепшот файловой системы контейнера и конфиг-файл (если мы говорим про 
runc-рантайм). При этом все контейнеры работают в рамках одной хостовой
машины, поверх одного ядра хостовой ОС.

Виртуализация осуществляется путем запуска полноценной операционной системы 
поверх хостовой машины, таким образом каждая VM работает поверх ядра собственной ОС.
При этом, доступ к ресурсам хоста виртуальная машина получает засчет гипервизора,
который координирует работу VM-ок.

5) На каких компонентах Linux основана контейнеризации в Docker?

Как уже было упомянуто ранее, контейнеризация (в Линукс) основана на 
namespaces и cgroups.

namespaces - пространства имен внутри операционной системы. данный механизм 
позволяет нам изолировать процесс таким образом, чтобы он не видел процессы,
сетевые интерфейсы, пользователей и т.д. помимо тех, что заданы внутри самого контейнера

cgroups - механизм, позволяющий установить некоторому процессу ограничение на 
количество потребляемых ресурсов ОС.

6) Опишите составные части архитектуры Docker

Глобально, Докер состоит из трех частей:
    1) Docker cli - клиентское приложение, через которое мы можем управлять 
возможностями докера удаленного
    2) Docker daemon - фоновый линукс-процесс, который принимает запросы 
с клиента и выполняет функционал Докера: сборку образов, создание контейнеров,
фетчинг образов с сети и т.п. При создании контейнера, docker daemon взаимодействует
с containerd-рантаймом, который тоже является фоновым линукс-процессом. В 
свою очередь containerd использует runc в качестве низкоуровнего рантайма для
запуска контейнеров
    3) Docker registry - репозиторий, с которого можно скачивать уже созданные 
образы.

7) Как устроен образ контейнера? 

Фактически, образ контейнера представляет собой снепшот файловой системы контейнера.
Сам образ состоит из слоев, где каждый слой символизирует изменение файловой системы.
Данный подход (наслоение образов) позволяет нам создавать свои образы поверх уже 
существуюших.

8) Почему вместо "COPY . . / RUN npm install" рекомендуют делать "COPY package.json / RUN npm install / COPY . ."?

Потому что во втором случае при пересборке образа нам нужно будет переустанавливать
зависимости, лежащие в package.json, только при изменении этих зависимостей. В случае,
если зависимости не изменятся, нам не нужно будет заново их подкачивать, следовательно
при сборке произойдет только копирование (COPY . .).
В первом же случае образ будет полностью пересобираться при изменении чего-либо в директории проекта,
Докер не будет кэшировать результат npm install.

9) Что такое под в Kubernetes? Могут ли два контейнера внутри одного пода слушать один и тот же порт?

Под - самая элементарная единица k8s. Представляет собой набор тесно связанных контейнеров (или 1 контейнер).
Контейнеры внутри пода разделяют network namespace, process namespace и возсожно что-то еще.

Но суть в том, что мы не можем открыть один порт внутри одного network napespace, поэтому нет.

10) Какие виды JOIN знаете и чем они отличаются?

INNER JOIN - возвращает элементы, содержащиеся в обеих таблицах, которые имеют общее значение атрибута 
LEFT JOIN - возвращает все элементы первой таблицы джойна, вне зависимости от того имеется ли во второй таблицы элемент с совпадающим значением атрибута
RIGHT JOIN - аналогично пред. только для второй таблицы
FULL JOIN - возвращает объединение элементов обеих таблиц

11) Что такое having в SQL запросе? Чем отличается от where?

WHERE применяется до группировки, HAVING после.